{
  "_from": "dot-prop@^4.1.0",
  "_id": "dot-prop@4.1.1",
  "_integrity": "sha1-qEk/C3te7sglJbXHWH+n3nyoWcE=",
  "_location": "/npm/update-notifier/configstore/dot-prop",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "dot-prop@^4.1.0",
    "name": "dot-prop",
    "escapedName": "dot-prop",
    "rawSpec": "^4.1.0",
    "saveSpec": null,
    "fetchSpec": "^4.1.0"
  },
  "_requiredBy": [
    "/npm/update-notifier/configstore"
  ],
  "_resolved": "https://registry.npmjs.org/dot-prop/-/dot-prop-4.1.1.tgz",
  "_shasum": "a8493f0b7b5eeec82525b5c7587fa7de7ca859c1",
  "_shrinkwrap": null,
  "_spec": "dot-prop@^4.1.0",
  "_where": "/Users/zkat/Documents/code/npm/node_modules/update-notifier/node_modules/configstore",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bin": null,
  "bugs": {
    "url": "https://github.com/sindresorhus/dot-prop/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "is-obj": "^1.0.0"
  },
  "deprecated": false,
  "description": "Get, set, or delete a property from a nested object using a dot path",
  "devDependencies": {
    "ava": "*",
    "matcha": "^0.7.0",
    "xo": "*"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/sindresorhus/dot-prop#readme",
  "keywords": [
    "obj",
    "object",
    "prop",
    "property",
    "dot",
    "path",
    "get",
    "set",
    "delete",
    "del",
    "access",
    "notation",
    "dotty"
  ],
  "license": "MIT",
  "name": "dot-prop",
  "optionalDependencies": {},
  "peerDependencies": {},
  "readme": "# dot-prop [![Build Status](https://travis-ci.org/sindresorhus/dot-prop.svg?branch=master)](https://travis-ci.org/sindresorhus/dot-prop)\n\n> Get, set, or delete a property from a nested object using a dot path\n\n\n## Install\n\n```\n$ npm install --save dot-prop\n```\n\n\n## Usage\n\n```js\nconst dotProp = require('dot-prop');\n\n// getter\ndotProp.get({foo: {bar: 'unicorn'}}, 'foo.bar');\n//=> 'unicorn'\n\ndotProp.get({foo: {bar: 'a'}}, 'foo.notDefined.deep');\n//=> undefined\n\ndotProp.get({foo: {bar: 'a'}}, 'foo.notDefined.deep', 'default value');\n//=> 'default value'\n\ndotProp.get({foo: {'dot.dot': 'unicorn'}}, 'foo.dot\\\\.dot');\n//=> 'unicorn'\n\n// setter\nconst obj = {foo: {bar: 'a'}};\ndotProp.set(obj, 'foo.bar', 'b');\nconsole.log(obj);\n//=> {foo: {bar: 'b'}}\n\ndotProp.set(obj, 'foo.baz', 'x');\nconsole.log(obj);\n//=> {foo: {bar: 'b', baz: 'x'}}\n\n// has\ndotProp.has({foo: {bar: 'unicorn'}}, 'foo.bar');\n//=> true\n\n// deleter\nconst obj = {foo: {bar: 'a'}};\ndotProp.delete(obj, 'foo.bar');\nconsole.log(obj);\n//=> {foo: {}}\n\nobj.foo.bar = {x: 'y', y: 'x'};\ndotProp.delete(obj, 'foo.bar.x');\nconsole.log(obj);\n//=> {foo: {bar: {y: 'x'}}}\n```\n\n\n## API\n\n### get(obj, path, [defaultValue])\n\n### set(obj, path, value)\n\n### has(obj, path)\n\n### delete(obj, path)\n\n#### obj\n\nType: `Object`\n\nObject to get, set, or delete the `path` value.\n\n#### path\n\nType: `string`\n\nPath of the property in the object, using `.` to separate each nested key.\n\nUse `\\\\.` if you have a `.` in the key.\n\n#### value\n\nType: `any`\n\nValue to set at `path`.\n\n#### defaultValue\n\nType: `any`\n\nDefault value.\n\n\n## License\n\nMIT Â© [Sindre Sorhus](https://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/dot-prop.git"
  },
  "scripts": {
    "bench": "matcha bench.js",
    "test": "xo && ava"
  },
  "version": "4.1.1",
  "xo": {
    "esnext": true
  }
}
